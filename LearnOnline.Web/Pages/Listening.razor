@page "/audit/listening"
@using LearnOnline.Models
@using LearnOnline.Models.Entities
@inject IPartService partService
@inject HttpClient _httpClient
<h3>Listening</h3>

<div>
    <div id="nav">
        <p>Dạng bài</p>
        <a href="/audit/listening">Unit 1</a>
        <br />

    </div>

    <div id="section">
        @foreach (var item in Parts)
        {
            <p>@item.Title</p>
            <img src="../image/@item.Image" style="height:auto;width:auto" alt="">

            <audio controls>
                <source src="../audio/@item.Record">
            </audio>

        }
        <EditForm Model="answer" OnValidSubmit="Handle">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <InputText id="result1" @bind-Value="answer.Result1" class="form-control col-3" placeholder="1" />
            </div>
            <div class="mb-3">
                <InputText id="result2" @bind-Value="answer.Result2" class="form-control col-3 " placeholder="2" />
            </div>
            <div class="mb-3">
                <InputText id="result3" @bind-Value="answer.Result3" class="form-control col-3 " placeholder="3" />
            </div>
            <div class="mb-3">
                <InputText id="result4" @bind-Value="answer.Result4" class="form-control col-3 " placeholder="4" />
            </div>
            <div class="mb-3">
                <InputText id="result5" @bind-Value="answer.Result5" class="form-control col-3" placeholder="5" />
            </div>
            <button type="submit" class="btn btn-primary">Nộp Bài</button>
            <div class="@messageCssClass">
                <span>@message</span>
            </div>
        </EditForm>
    </div>
</div>

<style>
    #nav {
        line-height: 30px;
        background-color: #eeeeee;
        height: 300px;
        width: 25%;
        float: left;
        padding: 5px;
    }

    #section {
        width: 65%;
        float: left;
        padding: 10px;
    }
</style>
@code {
    string message = string.Empty;
    string messageCssClass = string.Empty;
    int partId = 1;
    int count = 5;
    string value = "answer.Result";
    AnswerDto answer = new AnswerDto();
    private static List<Part> Parts = new List<Part>();
    private static List<Answer> Answers = new List<Answer>();
    protected override async Task OnInitializedAsync()
    {
        var response = await partService.GetParts();
        Parts = response.Data;

        var partId = 1;
        var answer = await _httpClient.GetFromJsonAsync<ServiceResponse<List<Answer>>>($"api/Answer/{partId}");
        Answers = answer.Data;
    }
    async Task Handle()
    {
        var result = 0;
        var x = answer;
        var answers = await _httpClient.GetFromJsonAsync<ServiceResponse<List<Question>>>($"api/Question/{partId}");
        if (answer.Result1.ToLower() != "" && answers.Data[0].Result.ToLower().Contains(answer.Result1.ToLower()))
        {
            result++;
        }
        if (answer.Result2.ToLower() != "" && answers.Data[1].Result.ToLower().Contains(answer.Result2.ToLower()))
        {
            result++;
        }
        if (answer.Result3.ToLower() != "" && answers.Data[2].Result.ToLower().Contains(answer.Result3.ToLower()))
        {
            result++;
        }
        if (answer.Result4.ToLower() != "" && answers.Data[3].Result.ToLower().Contains(answer.Result4.ToLower()))
        {
            result++;

        }
        if (answer.Result5.ToLower() != "" && answers.Data[4].Result.ToLower().Contains(answer.Result5.ToLower()))
        {
            result++;
        }
        message = "Kết quả:" + result + "/" + $"{count}";
        result = 0;

    }
}
