@page "/admin/newCreate"
@using LearnOnline.Web
@using LearnOnline.Web.Services
@using System.Text;
@layout AdminLayout
@inject UploadFile uploadFile
@inject IPartService partService
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient
@inject IJSRuntime JSRuntime
@inject Blazored.SessionStorage.ISessionStorageService session

<h3>Create New</h3>
<EditForm Model="newDto" OnValidSubmit="AddOrUpdatePart">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="row">
        <div class="mb-0 col-3 p-0">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="newDto.Title" class="form-control"></InputText>
        </div>
        <div class="mb-0 col-12 p-0">
            <label for="title">Image</label>
            <InputFile OnChange="OnInputFileChange" multiple></InputFile>
            <a class="btn btn-succes" @onclick="DeleteImage">Delete</a>
            @if (iamgeDataUrls != null && iamgeDataUrls.Count > 0)
            {
                <div>
                    @foreach (var img in iamgeDataUrls)
                    {
                        <img src="@img" style="height:200px;width:200px" />
                    }
                </div>
            }
        </div>
        <div class="mb-0 col-12 p-0">
            <label for="title">Description</label>
        </div>
        <div @ref="@divEditorElement" />
    </div>
    <hr />
    <button type="submit" class="btn btn-primary float-end">@btnText</button>
    <ValidationSummary></ValidationSummary>
</EditForm>


@code {
    private ElementReference divEditorElement;
    string btnText = "Add";
    string labelText = "";
    List<string> iamgeDataUrls = new List<string>();
    List<Image> imageList = new List<Image>();
    Image imageRequest = new Image();
    private static New newDto = new New();
    private static List<Category> categories = new List<Category>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divEditorElement);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        //check login
        var user = await session.GetItemAsync<string>("SessionUser");
        if (user != "admin@gmail.com")
        {
            NavigationManager.NavigateTo("login");
        }
    }
    async Task AddOrUpdatePart()
    {
        var user = await session.GetItemAsync<string>("SessionUser");
        var strSavedContent = await JSRuntime.InvokeAsync<string>(
        "QuillFunctions.getQuillContent", divEditorElement);
        newDto.Image = imageRequest.Data;
        byte[] bytes = Encoding.UTF8.GetBytes(strSavedContent);
        newDto.Description = bytes;
        //new topic 1
        newDto.Topic = "1";
        newDto.UserName = user;
        var x = await _httpClient.PostAsJsonAsync("api/New", newDto);
        //back
        NavigationManager.NavigateTo("admin/new");
    }
    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        var format = "image/png";
        foreach (var item in imageFiles)
        {
            var image = new Image();
            // var resizedImageFile = await item.RequestImageFileAsync(format, 100, 100);
            var buffer = new byte[item.Size];

            await item.OpenReadStream(1572864000).ReadAsync(buffer);
            var imgUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            iamgeDataUrls.Add(imgUrl);
            imageRequest.Data = buffer;
            image.ImageName = item.Name;
            image.Data = buffer;
            image.PartId = 1;
            imageList.Add(image);
        }
    }
    public async void DeleteImage()
    {
        iamgeDataUrls = new List<string>();
    }
    public async Task GetFileUpload()
    {
        imageList = await uploadFile.GetFile(1);
        var format = "image/png";
        foreach (var item in imageList)
        {
            var imgUrl = $"data:{format};base64,{Convert.ToBase64String(item.Data)}";
            iamgeDataUrls.Add(imgUrl);
        }
    }
}
