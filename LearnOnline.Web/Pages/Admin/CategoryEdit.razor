@page "/admin/EditCategory/{id:int}"
@layout AdminLayout
@inject HttpClient _client
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService session
<h3>EditCategory</h3>


<EditForm Model="category" OnValidSubmit="AddOrUpdateCategory">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="row">
        <InputNumber id="id" @bind-Value="category.Id" class="form-control" hidden></InputNumber>
        <div class="mb-0 col-3">
            <label for="title">Name</label>
            <InputText id="title" @bind-Value="category.CategoryName" class="form-control"></InputText>
        </div>
        <div class="mb-0 col-3">
            <label for="title">Description</label>
            <InputText id="title" @bind-Value="category.Description" class="form-control"></InputText>
        </div>
    </div>
    <hr />
    <button type="submit" class="btn btn-primary text-center">Edit</button>
    <ValidationSummary></ValidationSummary>
    <a class="btn btn-danger" @onclick="(() => DeleteCate(category.Id))">
        <i class="oi oi-copywriting"></i>
        Delete
    </a>
</EditForm>

@code {
    string btnText = "";
    string labelText = "";
    List<string> iamgeDataUrls = new List<string>();
    [Parameter]
    public int Id { get; set; }
    private static Category category = new Category();
    //private static List<Category> categories = new List<Category>();
    protected override async Task OnInitializedAsync()
    {
        var user = await session.GetItemAsync<string>("SessionUser");
        if (user != "admin@gmail.com")
        {
            NavigationManager.NavigateTo("login");
        }
        var response = await _client.GetFromJsonAsync<Category>($"api/Category/categoryId?categoryId={Id}");
        category.Id = response.Id;
        category.CategoryName = response.CategoryName;
        category.Description = response.Description;
        var x = category.Id;
    }
    async void AddOrUpdateCategory()
    {
        await _client.PostAsJsonAsync("api/Category", category);
        //back
        category = new Category();
        NavigationManager.NavigateTo("admin/category");
    }
    async void DeleteCate(int id)
    {
        await _client.DeleteAsync($"api/Category/{id}");
        NavigationManager.NavigateTo("admin/category");
    }
}
