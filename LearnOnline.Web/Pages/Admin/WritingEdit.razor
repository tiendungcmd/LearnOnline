@page "/admin/EditWriting/{id:int}"
@using Blazored.TextEditor
@using LearnOnline.Web
@using LearnOnline.Web.Services
@using Blazored.LocalStorage
@layout AdminLayout
@inject UploadFile uploadFile
@inject IPartService partService
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient
<h3>Create Question</h3>
<EditForm Model="partDto" OnValidSubmit="AddOrUpdatePart">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="row">
        <div class="mb-0 col-3">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="partDto.Title" class="form-control"></InputText>
        </div>
        <div class="mb-0 col-3">
            <label for="title">Category</label>
            <select class="form-select" aria-label="Default select example" @bind="partDto.CategoryId">
                <option selected>Open this select menu</option>
                @foreach (var item in categories)
                {
                    <option value="@item.Id">@item.CategoryName</option>
                }
            </select>
        </div>

    </div>
    <hr />
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                Html Text Editor
            </div>
            <div class="card-body mb-5" style="height:200px;">

                <BlazoredTextEditor @ref=QuillHtml Placeholder="write somthing...">
                </BlazoredTextEditor>

            </div>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">@btnText</button>
    <ValidationSummary></ValidationSummary>
    <a class="btn btn-danger" @onclick="(() => DeleteCate(partDto.Id))">
        <i class="oi oi-copywriting"></i>
        Delete
    </a>

</EditForm>

<InputFile OnChange="OnInputFileChange" multiple></InputFile>
<button class="btn btn-succes" @onclick="DeleteImage">Delete</button>
<br>
<label>@labelText</label>

@if (iamgeDataUrls != null && iamgeDataUrls.Count > 0)
{
    <div>
        @foreach (var img in iamgeDataUrls)
        {
            <img src="@img" width=auto height=auto />
        }
    </div>
}
@code {
    private BlazoredTextEditor QuillHtml;
    [Parameter]
    public int Id { get; set; }
    string btnText = "Edit";
    string labelText = "";
    List<string> iamgeDataUrls = new List<string>();
    List<Image> imageList = new List<Image>();

    private static PartDto partDto = new PartDto();
    private static List<Category> categories = new List<Category>();
    protected override async Task OnInitializedAsync()
    {
        var partDtoac = await _httpClient.GetFromJsonAsync<PartDto>($"api/Part/PartId?PartId={Id}");
        partDto = partDtoac;
        var response = await _httpClient.GetFromJsonAsync<List<Category>>("api/Category");
        categories = response;
        imageList = await uploadFile.GetFile(Id);
        var format = "image/png";
        foreach (var item in imageList)
        {
            var imgUrl = $"data:{format};base64,{Convert.ToBase64String(item.Data)}";
            iamgeDataUrls.Add(imgUrl);
        }
    }
    async void AddOrUpdatePart()
    {
        //skill 1 = reading
        partDto.SkillId = 1;
        partDto.Id = Id;
        var part = await partService.CreatePart(partDto);
        //remove iamge before save image
        await _httpClient.DeleteAsync($"api/Image/{Id}");
        foreach (var item in imageList)
        {
            item.PartId = part.Data.Id;
            uploadFile.SaveFile(item);
        }

        //back
        NavigationManager.NavigateTo("admin/writing");
    }
    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        var format = "image/png";
        foreach (var item in imageFiles)
        {
            var image = new Image();
            // var resizedImageFile = await item.RequestImageFileAsync(format, 100, 100);
            var buffer = new byte[item.Size];

            await item.OpenReadStream(1572864000).ReadAsync(buffer);
            var imgUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            iamgeDataUrls.Add(imgUrl);
            image.ImageName = item.Name;
            image.Data = buffer;
            image.PartId = 1;
            imageList.Add(image);
        }
    }
    public async void DeleteImage()
    {
        iamgeDataUrls = new List<string>();
        imageList = new List<Image>();
    }
    public async Task GetFileUpload()
    {
        imageList = await uploadFile.GetFile(1);
        var format = "image/png";
        foreach (var item in imageList)
        {
            var imgUrl = $"data:{format};base64,{Convert.ToBase64String(item.Data)}";
            iamgeDataUrls.Add(imgUrl);
        }
    }
    async void DeleteCate(int id)
    {
        //remove iamge before save image
        await _httpClient.DeleteAsync($"api/Image/{Id}");
        await _httpClient.DeleteAsync($"api/Question/{Id}");
        await _httpClient.DeleteAsync($"api/Part/{Id}");
        //back
        NavigationManager.NavigateTo("admin/writing");
    }
}
