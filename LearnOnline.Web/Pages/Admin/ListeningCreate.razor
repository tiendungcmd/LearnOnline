@page "/admin/createListening"
@using LearnOnline.Models.Entities
@using LearnOnline.Web
@using LearnOnline.Web.Services
@using LearnOnline.Models
@layout AdminLayout
@inject UploadFile uploadFile
@inject IPartService partService
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient
@inject IJSRuntime JSRuntime
@using System.Text;

<h3>Create Listening</h3>
<EditForm Model="partDto" OnValidSubmit="AddOrUpdatePart">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="row">
        <div class="mb-0 col-3">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="partDto.Title" class="form-control"></InputText>
        </div>
        <div class="mb-0 col-3">
            <label for="title">Category</label>
            <select class="form-select" aria-label="Default select example" @bind="partDto.CategoryId">
                <option selected>Open this select menu</option>
                @foreach (var item in categories)
                {
                    <option value="@item.Id">@item.CategoryName</option>
                }
            </select>
        </div>
        <label>Audio</label>
        <InputFile OnChange="OnInputFileChangeMp3" multiple></InputFile>
        <a class="btn btn-succes" @onclick="DeleteAudio">Delete</a>
        <br>
        @if (audioDataUrls != null)
        {
            <div>
                @foreach (var img in audioDataUrls)
                {
                    <audio controls="controls" autobuffer="autobuffer">
                        <source src="@img">
                    </audio>
                }
            </div>
        }
        <div class="mb-0 col-12 p-0">
            <label for="title">Description</label>
        </div>
        <div @ref="@divEditorElement" />
    </div>

    <hr />
    <button type="submit" class="btn btn-primary float-end">@btnText</button>
    <ValidationSummary></ValidationSummary>
</EditForm>

@code {
    private ElementReference divEditorElement;
    string btnText = "Add";
    string labelText = "";
    List<string> iamgeDataUrls = new List<string>();
    List<string> audioDataUrls = new List<string>();

    List<Image> imageList = new List<Image>();
    AudioModel audio = new AudioModel();

    private static PartDto partDto = new PartDto();
    private static List<Category> categories = new List<Category>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divEditorElement);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var response = await _httpClient.GetFromJsonAsync<List<Category>>("api/Category");
        categories = response;
    }
    async void AddOrUpdatePart()
    {
        partDto.SkillId = 2;
        partDto.Record = audio.Data;
        //getDescreption
        var strSavedContent = await JSRuntime.InvokeAsync<string>(
       "QuillFunctions.getQuillContent", divEditorElement);
        byte[] bytes = Encoding.UTF8.GetBytes(strSavedContent);
        partDto.Description = bytes;

        var part = await partService.CreatePart(partDto);
        foreach (var item in imageList)
        {
            item.PartId = part.Data.Id;
            uploadFile.SaveFile(item);
        }

        //back
        NavigationManager.NavigateTo("admin/listening", forceLoad: true);
    }
    async Task OnInputFileChangeMp3(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        var format = "audio/mpeg";
        foreach (var item in imageFiles)
        {
            var image = new Image();
            var buffer = new byte[item.Size];
            await item.OpenReadStream(1572864000).ReadAsync(buffer);
            var imgUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            audioDataUrls.Add(imgUrl);
            audio.Data = buffer;
            image.ImageName = item.Name;
            image.Data = buffer;
            image.PartId = 1;
            imageList.Add(image);
        }
    }
    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        var format = "image/png";
        foreach (var item in imageFiles)
        {
            var image = new Image();
            // var resizedImageFile = await item.RequestImageFileAsync(format, 100, 100);
            var buffer = new byte[item.Size];

            await item.OpenReadStream(1572864000).ReadAsync(buffer);
            var imgUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            iamgeDataUrls.Add(imgUrl);
            image.ImageName = item.Name;
            image.Data = buffer;
            image.PartId = 1;
            imageList.Add(image);
        }
    }
    public async void DeleteImage()
    {
        iamgeDataUrls = new List<string>();
    }
    public async Task GetFileUpload()
    {
        imageList = await uploadFile.GetFile(1);
        var format = "image/png";
        foreach (var item in imageList)
        {
            var imgUrl = $"data:{format};base64,{Convert.ToBase64String(item.Data)}";
            iamgeDataUrls.Add(imgUrl);
        }
    }
    public async void DeleteAudio()
    {
        audioDataUrls = new List<string>();
    }
}
