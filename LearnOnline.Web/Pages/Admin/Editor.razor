@page "/admin"
@*Inject JSRuntime to allow JavaScript Interop *@
@inject IJSRuntime JSRuntime
@if (EditorEnabled)
{

}
<div @ref="@divEditorElement" />

<br />
<button class="btn btn-primary" @onclick="GetText">Get Text</button>
<button class="btn btn-primary" @onclick="GetHTML">Get HTML</button>
<button class="btn btn-primary" @onclick="GetEditorContent">Get Content</button>
<br />
<br />
<br />
@*<button class="btn btn-danger" @onclick="SaveContent">Save Content</button>*@
<button class="btn btn-success" @onclick="LoadContent">Load Saved Content</button>
<br />
<br />
<button class="btn btn-info" @onclick="DisableQuillEditor">Disable Editor</button>
<br />
<br />
<button class="btn btn-info" @onclick="ClearQuillEditor">Clear Editor</button>
<br />
<div @ref="@divEditorElement1" />
<div>
    @EditorContent
</div>
<div>
    @((MarkupString)@EditorHTMLContent)
</div>

@code {
    private string strSavedContent = "";
    private ElementReference divEditorElement;
    private ElementReference divEditorElement1;
    private string EditorContent;
    private string EditorHTMLContent;
    private bool EditorEnabled = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divEditorElement);
            await JSRuntime.InvokeAsync<string>(
           "QuillFunctions.createQuill1", divEditorElement1);
        }
    }
    async Task GetText()
    {
        EditorHTMLContent = "";
        EditorContent = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillText", divEditorElement);
    }
    async Task GetHTML()
    {
        EditorContent = "";
        EditorHTMLContent = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillHTML", divEditorElement);
    }
    async Task GetEditorContent()
    {
        //EditorHTMLContent = "";
        EditorHTMLContent = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillContent", divEditorElement);
    }
    //async Task SaveContent()
    //{
    //    strSavedContent = await JSRuntime.InvokeAsync<string>(
    //        "QuillFunctions.getQuillContent", divEditorElement);
    //}
    async Task LoadContent()
    {
        var QuillDelta = await JSRuntime.InvokeAsync<object>(
            "QuillFunctions.setContent", divEditorElement1, EditorHTMLContent);
    }
    async Task DisableQuillEditor()
    {
        EditorEnabled = false;
        await JSRuntime.InvokeAsync<object>(
            "QuillFunctions.disableQuillEditor", divEditorElement);
    }
    async Task ClearQuillEditor()
    {
        await JSRuntime.InvokeAsync<object>(
            "QuillFunctions.clear", divEditorElement);
    }
}
