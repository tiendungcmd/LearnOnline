@page "/learn/{id:int}"
@using System.Text;
@using System.Linq
@using LearnOnline.Models
@inject INewService NewService
@inject HttpClient _client
@inject IJSRuntime JSRuntime

<div style="display:none">
    <div @ref="@divEditorElement" />
</div>
<div class="container ">
    <div class="col-12 new">
        <div class="name"> <h3> <b>@newDto?.Title</b></h3></div>
    </div>

    @if (iamgeDataUrls != null && iamgeDataUrls.Count > 0)
    {
        <div>
            @foreach (var img in iamgeDataUrls)
            {
                <img src="@img"style="height:500px;width:500px;margin-left: 25%;" alt="" />
            }
        </div>
    }

    <div class="name"> @((MarkupString)@EditorHTMLContent)</div>
</div>
<style>
    .new {
        text-align: center;
    }
</style>
@code {
    [Parameter]
    public int Id { get; set; }
    private string EditorHTMLContent;
    private ElementReference divEditorElement;

    List<string> iamgeDataUrls = new List<string>();
    List<Image> imageList = new List<Image>();
    Image imageRequest = new Image();
    private static NewDTo newDto = new NewDTo();
    private static List<Category> categories = new List<Category>();
    private static List<New> Response = new List<New>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divEditorElement);
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        var newImage = new NewDTo();
        var format = "image/png";
        var response = await _client.GetFromJsonAsync<New>($"api/New/id?id={Id}");
        newDto.Id = response.Id;
        newDto.Title = response.Title;
        //show data but hidden
        var des = Encoding.UTF8.GetString(response.Description, 0, response.Description.Length);
        var QuillDelta = await JSRuntime.InvokeAsync<object>(
        "QuillFunctions.setContent", divEditorElement, des);
        if (response.Image != null)
        {
            newImage.Image = $"data:{format};base64,{Convert.ToBase64String(response.Image)}";
            iamgeDataUrls.Add(newImage.Image);
        }
        EditorHTMLContent = await JSRuntime.InvokeAsync<string>(
           "QuillFunctions.getQuillHTML", divEditorElement);
    }
}