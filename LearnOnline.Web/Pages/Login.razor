@page "/login"
@using Blazored.LocalStorage
@using LearnOnline.Models
@using LearnOnline.Web.Service
@using Microsoft.AspNetCore.WebUtilities
@*@inject ILocalStorageService LocalStorage*@
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="login">
    <h2>Login</h2>
    <EditForm Model="user" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <InputText id="email" @bind-Value="user.Email" class="form-control col-9 m-auto" placeholder="username" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>
        <div class="mb-3">
            <InputText id="password" @bind-Value="user.Password" class="form-control  col-9 m-auto" placeholder="password" type="password" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
        <div class="text-danger">
            <span>@errorMessage</span>
        </div>
    </EditForm>
</div>



@code {
    private UserLogin user = new UserLogin();

    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
